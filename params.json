{"name":"halp","tagline":"Hypergraph Algorithms Package","body":"[![Build Status](https://travis-ci.org/tmmurali/halp.svg?branch=master)](https://travis-ci.org/tmmurali/halp)\r\n[![Coverage Status](https://coveralls.io/repos/tmmurali/halp/badge.png?branch=master)](https://coveralls.io/r/tmmurali/halp?branch=master)\r\n\r\n_halp_ is a Python software package that provides both a directed and an undirected hypergraph implementation, as well as several important and canonical algorithms that operate on these hypergraphs.\r\n\r\n\r\n_Use pip to install the latest stable release with: `pip install halp`_\r\n\r\nLatest Stable Release: 1.0 - October 8, 2014\r\n\r\n###[halp v1.0 API Documentation](docs/_build/html/index.html)\r\n***\r\n\r\n#Getting Started\r\n\r\n_What are directed and undirected hypergraphs?_\r\n\r\nSimply put, hypergraphs are a generalization of graphs.\r\n\r\nA **directed hypergraph** contains nodes and hyperedges. Each hyperedge connects a tail set of nodes to a head set of nodes (where the tail and head cannot both be empty). A directed edge in a traditional directed graph, where an edge connects from exactly one node to exactly one other node, is a special case of a directed hyperedge.\r\n\r\nSimilarly, an **undirected hypergraph** contains nodes and hyperedges. The difference here is that each hyperedge connects a single set of nodes together. An undirected edge in a traditional undirected graph, where two edges are connected to each other, is a special case of an undirected hyperedge.\r\n\r\n###Using Directed Hypergraphs\r\n\r\nThe following examples for directed hypergraphs will use the following hypergraph:\r\n![Directed hypergraph for the following examples](images/example_directed_hypergraph.png)\r\n\r\nWe can create a hypergraph explicitly:\r\n```python\r\nfrom halp.directed_hypergraph import DirectedHypergraph\r\n\r\n# Initialize an empty hypergraph\r\nH = DirectedHypergraph()\r\n\r\n# Add nodes 's' and 't' individually with arbitrary attributes\r\nH.add_node('s', source=True)\r\nH.add_node('t', sink=True)\r\n# Add several nodes simultaneously, having the same arbitrary attributes \r\nH.add_nodes(['x', 'y', 'z', 'u', 'a', 'b'], label='grey')\r\n\r\n# Add hyperedge from {'s'} to {'x'} with a weight of 1\r\nH.add_hyperedge(set(['s']), set(['x']), weight=1)\r\n# Add hyperedge from {'s'} to {'x', 'y'} with some arbitrary attributes and weight of 2\r\nH.add_hyperedge(set(['s']), set(['x']), {'color': 'red', 'active': True}, weight=2)\r\n# Add several hyperedges simultaneously, having individual weights\r\nhyperedges = [(['s'], ['z'], {'weight': 2}),\r\n\t\t\t  (['s'], ['t'], {'weight': 100}),\r\n\t\t\t  (['x'], ['s'], {'weight': 1}),\r\n\t\t\t  (['x', 'y', 'z'], ['u', 't'], {'weight': 3}),\r\n\t\t\t  (('t', 'b'), ('a'), {'weight': 1}),\r\n\t\t\t  (set(['a']), set(['u', 't']), {'weight': 1})]\r\nH.add_hyperedges(hyperedges)\r\n\r\n# Note: a hyperedge can be added even if it contains nodes that haven't\r\n# previously been put into the graph; the library will automatically add them!\r\n```\r\n\r\nIf a hypergraph is stored in a file similar to:\r\n```\r\ntail;head;weight\r\ns;x;1\r\ns;y,x;2\r\ns;z;2\r\ns;t;100\r\nx;s;1\r\nz,y,x;u,t;3\r\na;u,t;1\r\nb,t;a;1\r\n```\r\nthen we can read the hypergraph from the file with:\r\n```python\r\nfrom halp.directed_hypergraph import DirectedHypergraph\r\n\r\n# Initialize an empty hypergraph\r\nH = DirectedHypergraph()\r\n\r\nnode_delimiter = ','\r\ncolumn_separator = ';'\r\n\r\nH.read(\"hypergraph_filename.txt\", node_delimiter, column_separator)\r\n```\r\n\r\nFinally, we can execute an algorithm on an initialized hypergraph:\r\n```python\r\nfrom halp.directed_hypergraph import DirectedHypergraph\r\nfrom halp.algorithms import directed_paths\r\nH = DirectedHypergraph()\r\nH.read(\"hypergraph_filename.txt\", ',', ';')\r\n\r\n# Execute the \"Shortest Sum B-Tree\" algorithm with root 's'\r\nPv, W, ordering = \\\r\n\tdirected_paths.shortest_b_tree(H,\r\n\t\t\t\t\t\t\t\t   's',\r\n\t\t\t\t\t\t\t\t   directed_paths.sum_function,\r\n\t\t\t\t\t\t\t\t   True)\r\n# Use the returned result to retrieve the hypertree (a subhypergraph)\r\nsub_H = directed_paths.get_hypertree_from_predecessors(H, Pv, 's', W)\r\n```\r\n***\r\n\r\n###Testing\r\n\r\nUnit tests for the package are located in `tests/`, and can be run with `python setup.py test`.\r\n\r\nThe test runner depends on [pytest](http://pytest.org/latest/getting-started.html).\r\n\r\nTravis CI checks for pep8 compliance on all code. If the code doesn't meet pep8 compliance, the test suite will report a failure.\r\n***\r\n\r\n###Authors\r\n* [Brendan Avent](https://github.com/bavent)\r\n* [Anna Ritz](https://github.com/annaritz)\r\n* [T. M. Murali](https://github.com/tmmurali/)\r\n* [Jose Cadena](https://github.com/joseduc10)\r\n* [Yaser Keneshloo](https://github.com/yaserkl)","google":"UA-55979920-1","note":"Don't delete this file! It's used internally to help with page regeneration."}